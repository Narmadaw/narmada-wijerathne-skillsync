import React, { useState, useMemo } from 'react';
import { Link } from 'react-router-dom';
import Pagination from './../Pagination/Pagination';
import axios from 'axios';
import './SearchJob.scss';

let PageSize = 10;

const SearchJob = ({searchdata})=>{
  const [formData, setFormData] = useState({
    job_title:'',
    location:''
});

const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  searchdata = formData;
  // const [currentPage, setCurrentPage] = useState(1);
  
    
  // Fetch jobs data from the server
  
  // const currentTableData = useMemo(() => {
  //   const firstPageIndex = (currentPage - 1) * PageSize;
  //   const lastPageIndex = firstPageIndex + PageSize;
  //   return jobsData.slice(firstPageIndex, lastPageIndex);
  // }, [currentPage]);
    
    return (
        <>
         <div className='job-search-wrapper'>
          <div className='job-search-wrapper__search-bar'>
            <div>
              <h4 className='job-search-wrapper__search-lbl'>Job Title</h4>
              <input  className='job-search-wrapper__search-input' 
                      type="text" 
                      name='job_title' 
                      onChange={handleChange} />
            </div>
            <div>
              <h4 className='job-search-wrapper__search-lbl'>Location</h4>
              <input  className='job-search-wrapper__search-input' 
                      type="text" 
                      name='location' 
                      onChange={handleChange} />
            </div>
          </div>
            <h1>Job Listings</h1>
            {/* <ul className='job-search-wrapper__job-list'>
                {currentTableData.map(job => (
                    <>
                    <li className='job-search-wrapper__job-item' key={job.id}>
                      <div className='job-search-wrapper__container'>
                        <div className='job-search-wrapper__card'>
                        <Link className='job-search-wrapper__job-item-link' to={`/${job.id}`}>
                            {job.title} - {job.company}
                        </Link>

                        </div>
                        <div className='job-search-wrapper__card'>
                          <p className='job-search-wrapper__item'>{job.location}</p>
                        </div>
                        <div className='job-search-wrapper__card'>
                          <p className='job-search-wrapper__item'>{job.date}</p>
                        </div>
                      </div>
                    </li>
                    <li className='job-search-wrapper__h-line'></li>
                    </>
                ))}
            </ul> */}
            {/* <Pagination
              className="pagination-bar"
              currentPage={currentPage}
              totalCount={jobsData.length}
              pageSize={PageSize}
              onPageChange={page => setCurrentPage(page)}/> */}
        </div>
        </>
    );
}

export default SearchJob;



//   const [searchData, setSearchData] = useState(null);
//   const [currentPage, setCurrentPage] = useState(1);
//   const [formData, setFormData] = useState({
//     title:'',
//     location:''
// });

// let PageSize = 10;

// const handleChange = (e) => {
//     const { name, value } = e.target;
//     setFormData({ ...formData, [name]: value });
//   };

//   const handleSearch = async() =>{
//     try {
//       console.log(formData);
//       const response = await axios.get("http://localhost:8080/jobs/", {params: formData});
//       console.log(response.data)
//       setSearchData(response.data);
//     } catch (error) {
//       console.error('Error fetching data:', error);
//     }
//   }

//   useEffect(() => {
//     handleSearch();
//   }, []);

//   const currentTableData = useMemo(() => {
//     if (!searchData) {
//       return [];
//     }
//     const firstPageIndex = (currentPage - 1) * PageSize;
//     const lastPageIndex = firstPageIndex + PageSize;
//     return searchData.slice(firstPageIndex, lastPageIndex);
//   }, [currentPage, searchData]);

// =================================================

// const [searchData, setSearchData] = useState(null);
// const [currentPage, setCurrentPage] = useState(1);
// const [formData, setFormData] = useState({
//   title: '',
//   location: ''
// });

// let PageSize = 10;

// const handleChange = (e) => {
//   const { name, value } = e.target;
//   setFormData({ ...formData, [name]: value });
// };

// const handleSearch = async () => {
//   try {
//     console.log(formData);
//     const response = await axios.get("http://localhost:8080/jobs/", { params: formData });
//     console.log(response.data);
//     setSearchData(response.data);
//   } catch (error) {
//     console.error('Error fetching data:', error);
//   }
// };

// useEffect(() => {
//   const storedPage = localStorage.getItem('currentPage');
//   if (storedPage) {
//     setCurrentPage(parseInt(storedPage, 10));
//   }
//   handleSearch();
// }, []); 

// const storedFormData = JSON.parse(localStorage.getItem('searchFormData'));
//     if (storedFormData) {
//       setFormData(storedFormData);
//     }

// const currentTableData = useMemo(() => {
//   if (!searchData) {
//     return [];
//   }
//   const firstPageIndex = (currentPage - 1) * PageSize;
//   const lastPageIndex = firstPageIndex + PageSize;
//   return searchData.slice(firstPageIndex, lastPageIndex);
// }, [currentPage, searchData]);

// useEffect(() => {
//   localStorage.setItem('currentPage', currentPage.toString());
//   localStorage.setItem('searchFormData', JSON.stringify(formData));
// }, [currentPage, formData]);